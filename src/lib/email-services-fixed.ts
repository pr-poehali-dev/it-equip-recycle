// –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —Å —Ñ–∞–π–ª–∞–º–∏

// FormSubmit - –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–± (–¥–æ 5–ú–ë –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä)
export const sendViaFormSubmit = async (formData: any, files: File[]) => {
  try {
    console.log('üì§ FormSubmit: –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É...');
    
    const form = new FormData();
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    form.append('name', formData.name);
    form.append('email', formData.email);
    form.append('phone', formData.phone);
    form.append('company', formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞');
    form.append('city', formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city || '–ù–µ —É–∫–∞–∑–∞–Ω');
    form.append('plan', formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω');
    form.append('message', formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤');
    
    // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ FormSubmit
    form.append('_subject', '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —É—Ç–∏–ª–∏–∑–∞—Ü–∏—é IT –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è');
    form.append('_captcha', 'false'); 
    form.append('_template', 'table');
    form.append('_blacklist', 'captcha,_next,_template,_subject,_captcha,_cc,_blacklist');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ (FormSubmit –ª–∏–º–∏—Ç 5–ú–ë –æ–±—â–∏–π)
    const totalSize = files.reduce((sum, file) => sum + file.size, 0);
    console.log(`üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤: ${(totalSize / 1024 / 1024).toFixed(2)} –ú–ë`);
    
    if (totalSize > 5 * 1024 * 1024) {
      console.log('‚ö†Ô∏è –§–∞–π–ª—ã —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –¥–ª—è FormSubmit');
      return { success: false, error: 'Files too large', method: 'FormSubmit' };
    }
    
    // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª—ã
    files.slice(0, 5).forEach((file, index) => {
      form.append(`file${index + 1}`, file);
      console.log(`üìé –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª ${index + 1}: ${file.name} (${(file.size/1024/1024).toFixed(2)}–ú–ë)`);
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    const response = await fetch('https://formsubmit.co/commerce@rusutil-1.ru', {
      method: 'POST',
      body: form
    });

    if (response.ok) {
      console.log('‚úÖ FormSubmit: –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
      return { success: true, method: 'FormSubmit' };
    } else {
      console.error('‚ùå FormSubmit: –û—à–∏–±–∫–∞ HTTP', response.status, response.statusText);
      return { success: false, error: `HTTP ${response.status}`, method: 'FormSubmit' };
    }
    
  } catch (error) {
    console.error('‚ùå FormSubmit: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞', error);
    return { success: false, error, method: 'FormSubmit' };
  }
};

// FormSpree - —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–± (–±–µ–∑ —Ñ–∞–π–ª–æ–≤)
export const sendViaFormSpree = async (formData: any, files: File[]) => {
  try {
    console.log('üì§ FormSpree: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...');
    
    const response = await fetch('https://formspree.io/f/xvggqgok', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        name: formData.name,
        email: formData.email,
        phone: formData.phone,
        company: formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
        city: formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city,
        plan: formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω',
        message: formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
        files_count: files.length,
        files_info: files.length > 0 ? 
          `–ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–∫—Ä–µ–ø–∏–ª ${files.length} —Ñ–∞–π–ª(–æ–≤): ${files.map(f => `${f.name} (${(f.size/1024/1024).toFixed(2)}–ú–ë)`).join(', ')}` : 
          '–ë–µ–∑ —Ñ–∞–π–ª–æ–≤'
      })
    });

    if (response.ok) {
      console.log('‚úÖ FormSpree: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
      return { success: true, method: 'FormSpree' };
    } else {
      console.error('‚ùå FormSpree: –û—à–∏–±–∫–∞', response.status);
      return { success: false, error: `HTTP ${response.status}`, method: 'FormSpree' };
    }
    
  } catch (error) {
    console.error('‚ùå FormSpree: –û—à–∏–±–∫–∞', error);
    return { success: false, error, method: 'FormSpree' };
  }
};

// –ì–õ–ê–í–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è - —É–º–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
export const sendEmailWithFiles = async (formData: any, files: File[] = []) => {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏...');
  console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`);
  
  const totalSize = files.reduce((sum, file) => sum + file.size, 0);
  console.log(`üìä –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: ${(totalSize / 1024 / 1024).toFixed(2)} –ú–ë`);
  
  // –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  const formSpreePromise = sendViaFormSpree(formData, files);
  
  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Ñ–∞–π–ª–æ–≤
  let filePromise = null;
  
  if (files.length > 0) {
    if (totalSize <= 5 * 1024 * 1024) {
      // –ú–∞–ª–µ–Ω—å–∫–∏–µ —Ñ–∞–π–ª—ã - —á–µ—Ä–µ–∑ FormSubmit
      console.log('üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ú–∞–ª–µ–Ω—å–∫–∏–µ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ FormSubmit');
      filePromise = sendViaFormSubmit(formData, files);
    } else {
      // –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã - —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ FormSpree
      console.log('üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ë–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã - —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ');
      filePromise = Promise.resolve({ success: true, method: 'NotificationOnly' });
    }
  } else {
    console.log('üéØ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –ë–µ–∑ —Ñ–∞–π–ª–æ–≤');
    filePromise = Promise.resolve({ success: true, method: 'NoFiles' });
  }
  
  try {
    // –ñ–¥–µ–º –æ–±–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const [formSpreeResult, fileResult] = await Promise.allSettled([
      formSpreePromise,
      filePromise
    ]);
    
    let successCount = 0;
    const methods = [];
    
    if (formSpreeResult.status === 'fulfilled' && formSpreeResult.value.success) {
      successCount++;
      methods.push(formSpreeResult.value.method);
    }
    
    if (fileResult.status === 'fulfilled' && fileResult.value.success) {
      successCount++;
      methods.push(fileResult.value.method);
    }
    
    if (successCount > 0) {
      console.log(`‚úÖ SUCCESS! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑: ${methods.join(', ')}`);
      return { success: true, method: methods.join('+') };
    } else {
      console.log('‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å');
      return { success: false, error: 'All methods failed' };
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return { success: false, error };
  }
};

export const sendEmail = sendEmailWithFiles;