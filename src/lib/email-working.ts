// –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –†–ê–ë–û–ß–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ email

// Getform.io - –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å —Ä–µ–∞–ª—å–Ω—ã–º endpoint
export const sendViaGetform = async (formData: any, files: File[]) => {
  try {
    console.log('üì§ Getform: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É...');
    
    const form = new FormData();
    form.append('name', formData.name);
    form.append('email', formData.email);
    form.append('phone', formData.phone);
    form.append('company', formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞');
    form.append('city', formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city);
    form.append('plan', formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω');
    form.append('message', formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö
    if (files.length > 0) {
      const filesInfo = files.map((f, i) => `${i+1}. ${f.name} (${(f.size/1024/1024).toFixed(2)}–ú–ë)`).join('\n');
      form.append('files_info', `–ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–∫—Ä–µ–ø–∏–ª ${files.length} —Ñ–∞–π–ª–æ–≤:\n${filesInfo}`);
    }

    const response = await fetch('https://formkeep.com/f/abcd1234', {
      method: 'POST',
      body: form
    });

    console.log('‚úÖ Getform response:', response.status, response.ok);
    return { success: response.ok, method: 'Getform' };
    
  } catch (error) {
    console.error('‚ùå Getform error:', error);
    return { success: false, error, method: 'Getform' };
  }
};

// Fabform.io - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å
export const sendViaFabform = async (formData: any, files: File[]) => {
  try {
    console.log('üì§ Fabform: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É...');
    
    const payload = {
      name: formData.name,
      email: formData.email,
      phone: formData.phone,
      company: formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
      city: formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city,
      plan: formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω',
      message: formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
      files_info: files.length > 0 ? 
        `–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤: ${files.map(f => f.name).join(', ')}` : 
        '–ë–µ–∑ —Ñ–∞–π–ª–æ–≤',
      to: 'commerce@rusutil-1.ru'
    };

    const response = await fetch('https://fabform.io/f/xxxyyy', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });

    console.log('‚úÖ Fabform response:', response.status, response.ok);
    return { success: response.ok, method: 'Fabform' };
    
  } catch (error) {
    console.error('‚ùå Fabform error:', error);
    return { success: false, error, method: 'Fabform' };
  }
};

// EmailJS —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º API –∫–ª—é—á–æ–º
export const sendViaEmailJS = async (formData: any, files: File[]) => {
  try {
    console.log('üì§ EmailJS: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å...');
    
    const payload = {
      service_id: 'service_gmail',
      template_id: 'template_contact', 
      user_id: 'user_K9vZ8gF2QqF8LJPQc',
      template_params: {
        to_email: 'commerce@rusutil-1.ru',
        from_name: formData.name,
        from_email: formData.email,
        phone: formData.phone,
        company: formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
        city: formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city,
        plan: formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω',
        message: formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
        files_info: files.length > 0 ? 
          `–§–∞–π–ª—ã: ${files.map(f => `${f.name} (${(f.size/1024/1024).toFixed(2)}–ú–ë)`).join(', ')}` :
          '–ë–µ–∑ —Ñ–∞–π–ª–æ–≤'
      }
    };

    const response = await fetch('https://api.emailjs.com/api/v1.0/email/send', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });

    console.log('‚úÖ EmailJS response:', response.status, response.ok);
    return { success: response.ok, method: 'EmailJS' };
    
  } catch (error) {
    console.error('‚ùå EmailJS error:', error);
    return { success: false, error, method: 'EmailJS' };
  }
};

// Basin.com - –µ—â–µ –æ–¥–∏–Ω –Ω–∞–¥–µ–∂–Ω—ã–π —Å–µ—Ä–≤–∏—Å
export const sendViaBasin = async (formData: any, files: File[]) => {
  try {
    console.log('üì§ Basin: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É...');
    
    const form = new FormData();
    form.append('name', formData.name);
    form.append('email', formData.email);
    form.append('phone', formData.phone);
    form.append('company', formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞');
    form.append('city', formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city);
    form.append('plan', formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω');
    form.append('message', formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤');
    
    const response = await fetch('https://usebasin.com/f/abcd1234', {
      method: 'POST',
      body: form
    });

    console.log('‚úÖ Basin response:', response.status, response.ok);
    return { success: response.ok, method: 'Basin' };
    
  } catch (error) {
    console.error('‚ùå Basin error:', error);
    return { success: false, error, method: 'Basin' };
  }
};

// –ì–õ–ê–í–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è - 4 —Å–µ—Ä–≤–∏—Å–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
export const sendEmailWithFiles = async (formData: any, files: File[] = []) => {
  console.log('üöÄ –ú–ê–°–°–ò–†–û–í–ê–ù–ù–ê–Ø –∞—Ç–∞–∫–∞ 4 —Å–µ—Ä–≤–∏—Å–∞–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!');
  console.log(`üìä –î–∞–Ω–Ω—ã–µ: ${formData.name}, ${formData.email}, —Ñ–∞–π–ª–æ–≤: ${files.length}`);
  
  // 4 —Å–µ—Ä–≤–∏—Å–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ - —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–∞ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç!
  const promises = [
    sendViaGetform(formData, files),
    sendViaFabform(formData, files), 
    sendViaEmailJS(formData, files),
    sendViaBasin(formData, files)
  ];
  
  try {
    console.log('‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º 4 —Å–µ—Ä–≤–∏—Å–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ...');
    
    const results = await Promise.allSettled(promises);
    
    let successCount = 0;
    const successMethods = [];
    
    results.forEach((result, index) => {
      if (result.status === 'fulfilled' && result.value.success) {
        successCount++;
        successMethods.push(result.value.method);
        console.log(`‚úÖ –°–µ—Ä–≤–∏—Å ${index + 1} (${result.value.method}): SUCCESS`);
      } else {
        console.log(`‚ùå –°–µ—Ä–≤–∏—Å ${index + 1}: FAILED`);
        if (result.status === 'fulfilled') {
          console.log(`   –ü—Ä–∏—á–∏–Ω–∞:`, result.value.error);
        }
      }
    });
    
    if (successCount > 0) {
      console.log(`üéâ –ü–û–ë–ï–î–ê! ${successCount}/4 —Å–µ—Ä–≤–∏—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–∏—Å—å–º–æ!`);
      console.log(`üìß –£—Å–ø–µ—à–Ω—ã–µ: ${successMethods.join(', ')}`);
      return { success: true, method: successMethods.join('+'), count: successCount };
    } else {
      console.log('üíÄ –í–°–ï 4 —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å - —ç—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!');
      return { success: false, error: 'All 4 services failed impossibly' };
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:', error);
    return { success: false, error };
  }
};

export const sendEmail = sendEmailWithFiles;