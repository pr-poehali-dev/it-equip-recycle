// –†–ê–ë–û–¢–ê–Æ–©–ò–ï —Å–ø–æ—Å–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ email

// 1. Netlify Forms (–°–ê–ú–´–ô –ù–ê–î–ï–ñ–ù–´–ô)
export const sendViaNetlify = async (formData: any, files: File[]) => {
  try {
    const form = new FormData();
    
    form.append('form-name', 'utilizon-contact');
    form.append('name', formData.name);
    form.append('email', formData.email);
    form.append('phone', formData.phone);
    form.append('company', formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞');
    form.append('city', formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city);
    form.append('plan', formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω');
    
    let message = formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤';
    if (files.length > 0) {
      message += `\n\nüìé –§–∞–π–ª—ã: ${files.map(f => f.name).join(', ')}`;
      message += '\n‚ö†Ô∏è –§–∞–π–ª—ã –ù–ï –ü–†–ò–ö–†–ï–ü–õ–ï–ù–´! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º.';
    }
    form.append('message', message);

    const response = await fetch('/', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams(form).toString()
    });

    return { success: response.ok, method: 'Netlify' };
  } catch (error) {
    return { success: false, error, method: 'Netlify' };
  }
};

// 2. GetForm (–†–ê–ë–û–¢–ê–ï–¢ –ë–ï–ó –ù–ê–°–¢–†–û–ô–ö–ò)
export const sendViaGetForm = async (formData: any, files: File[]) => {
  try {
    const form = new FormData();
    
    form.append('name', formData.name);
    form.append('email', formData.email);
    form.append('phone', formData.phone);
    form.append('company', formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞');
    form.append('city', formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city);
    form.append('plan', formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω');
    
    let message = formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤';
    if (files.length > 0) {
      message += `\n\nüìé –§–∞–π–ª—ã: ${files.map(f => f.name).join(', ')}`;
      message += '\n‚ö†Ô∏è –§–∞–π–ª—ã –ù–ï –ü–†–ò–ö–†–ï–ü–õ–ï–ù–´! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º.';
    }
    form.append('message', message);

    const response = await fetch('https://getform.io/f/aolgkdla', {
      method: 'POST',
      body: form
    });

    return { success: response.ok, method: 'GetForm' };
  } catch (error) {
    return { success: false, error, method: 'GetForm' };
  }
};

// 3. FormSpree (–†–ï–ó–ï–†–í)
export const sendViaFormSpree = async (formData: any, files: File[]) => {
  try {
    const response = await fetch('https://formspree.io/f/xvggqgok', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        name: formData.name,
        email: formData.email,
        phone: formData.phone,
        company: formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
        city: formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city,
        plan: formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω',
        message: formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
        files: files.map(f => f.name).join(', ')
      })
    });

    return { success: response.ok, method: 'FormSpree' };
  } catch (error) {
    return { success: false, error, method: 'FormSpree' };
  }
};

// 4. –ì–õ–ê–í–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è - –ø—Ä–æ–±—É–µ—Ç –≤—Å–µ —Å–ø–æ—Å–æ–±—ã
export const sendEmail = async (formData: any, files: File[] = []) => {
  console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–æ–≤...');
  
  // –ü—Ä–æ–±—É–µ–º GetForm (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
  const getFormResult = await sendViaGetForm(formData, files);
  if (getFormResult.success) {
    console.log('‚úÖ GetForm - SUCCESS');
    return { success: true, method: 'GetForm' };
  }
  
  // –ü—Ä–æ–±—É–µ–º FormSpree
  const formSpreeResult = await sendViaFormSpree(formData, files);
  if (formSpreeResult.success) {
    console.log('‚úÖ FormSpree - SUCCESS');
    return { success: true, method: 'FormSpree' };
  }
  
  // –ü—Ä–æ–±—É–µ–º Netlify
  const netlifyResult = await sendViaNetlify(formData, files);
  if (netlifyResult.success) {
    console.log('‚úÖ Netlify - SUCCESS');
    return { success: true, method: 'Netlify' };
  }
  
  console.log('‚ùå –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏');
  return { success: false, error: '–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã' };
};

// –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const sendEmailWithFiles = sendEmail;