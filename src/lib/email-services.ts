// –†–ê–ë–û–¢–ê–Æ–©–ò–ï —Å–ø–æ—Å–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ email
import emailjs from '@emailjs/browser';

// 1. –ù–û–í–´–ô —Å–ø–æ—Å–æ–± - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ FormSubmit
export const sendViaFormSubmitMultiple = async (formData: any, files: File[]) => {
  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –æ—Å–Ω–æ–≤–Ω—É—é —Ñ–æ—Ä–º—É + –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω–æ');
    
    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ–æ—Ä–º–∞ –±–µ–∑ —Ñ–∞–π–ª–æ–≤
    const mainForm = new FormData();
    mainForm.append('name', formData.name);
    mainForm.append('email', formData.email);
    mainForm.append('phone', formData.phone);
    mainForm.append('company', formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞');
    mainForm.append('city', formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city);
    mainForm.append('plan', formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω');
    mainForm.append('message', formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤' + (files.length > 0 ? `\n\nüìé –ö –∑–∞—è–≤–∫–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤` : ''));
    mainForm.append('_subject', '–ó–ê–Ø–í–ö–ê —Å —Å–∞–π—Ç–∞ utilizon.pro');
    mainForm.append('_captcha', 'false');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ–æ—Ä–º—É
    const mainResponse = await fetch('https://formsubmit.co/commerce@rusutil-1.ru', {
      method: 'POST',
      body: mainForm
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω–æ
    if (files.length > 0) {
      for (let i = 0; i < files.length; i++) {
        const fileForm = new FormData();
        fileForm.append('name', `${formData.name} - –§–ê–ô–õ ${i + 1}/${files.length}`);
        fileForm.append('email', formData.email);
        fileForm.append('message', `–§–∞–π–ª ${i + 1} –∫ –∑–∞—è–≤–∫–µ –æ—Ç ${formData.name}`);
        fileForm.append('attachment', files[i], files[i].name);
        fileForm.append('_subject', `–§–ê–ô–õ ${i + 1}/${files.length} –∫ –∑–∞—è–≤–∫–µ - ${files[i].name}`);
        fileForm.append('_captcha', 'false');

        console.log(`üìé –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª ${i + 1}: ${files[i].name}`);
        await fetch('https://formsubmit.co/commerce@rusutil-1.ru', {
          method: 'POST',
          body: fileForm
        });
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 500));
      }
    }

    return { success: mainResponse.ok, method: 'FormSubmitMultiple' };
  } catch (error) {
    console.error('FormSubmitMultiple Error:', error);
    return { success: false, error, method: 'FormSubmitMultiple' };
  }
};

// 2. Netlify Forms (–†–ï–ó–ï–†–í)
export const sendViaNetlify = async (formData: any, files: File[]) => {
  try {
    const form = new FormData();
    
    form.append('form-name', 'utilizon-contact');
    form.append('name', formData.name);
    form.append('email', formData.email);
    form.append('phone', formData.phone);
    form.append('company', formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞');
    form.append('city', formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city);
    form.append('plan', formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω');
    form.append('message', formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤');

    const response = await fetch('/', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams(form).toString()
    });

    return { success: response.ok, method: 'Netlify' };
  } catch (error) {
    return { success: false, error, method: 'Netlify' };
  }
};

// 3. FormSubmit (–†–ê–ë–û–¢–ê–ï–¢ –ë–ï–ó –ù–ê–°–¢–†–û–ô–ö–ò)
export const sendViaFormSubmit = async (formData: any, files: File[]) => {
  try {
    console.log('üì§ FormSubmit: –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É, —Ñ–∞–π–ª–æ–≤:', files.length);
    const form = new FormData();
    
    form.append('name', formData.name);
    form.append('email', formData.email);
    form.append('phone', formData.phone);
    form.append('company', formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞');
    form.append('city', formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city);
    form.append('plan', formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω');
    
    let message = formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤';
    
    // –ü–†–ê–í–ò–õ–¨–ù–û –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª—ã –∫ FormSubmit
    if (files.length > 0) {
      files.forEach((file, index) => {
        console.log(`üìé –ü—Ä–∏–∫—Ä–µ–ø–ª—è—é —Ñ–∞–π–ª ${index + 1}: ${file.name} (${file.size} bytes)`);
        form.append(`attachment${index + 1}`, file, file.name);  // –†–∞–∑–Ω—ã–µ –∏–º–µ–Ω–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
      });
      message += `\n\nüìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`;
    }
    
    form.append('message', message);
    form.append('_subject', '–ó–ê–Ø–í–ö–ê —Å —Å–∞–π—Ç–∞ utilizon.pro');
    form.append('_captcha', 'false');

    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ FormSubmit...');
    const response = await fetch('https://formsubmit.co/commerce@rusutil-1.ru', {
      method: 'POST',
      body: form
    });

    console.log('üìß FormSubmit –æ—Ç–≤–µ—Ç:', response.status, response.ok);
    return { success: response.ok, method: 'FormSubmit' };
  } catch (error) {
    return { success: false, error, method: 'FormSubmit' };
  }
};

// 3. Web3Forms (–ù–û–í–´–ô –ù–ê–î–ï–ñ–ù–´–ô)
export const sendViaWeb3Forms = async (formData: any, files: File[]) => {
  try {
    const form = new FormData();
    
    form.append('access_key', 'b8c94d2e-7f3a-4b5e-9d8f-2a3b4c5d6e7f');
    form.append('name', formData.name);
    form.append('email', formData.email);
    form.append('phone', formData.phone);
    form.append('company', formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞');
    form.append('city', formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city);
    form.append('plan', formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω');
    
    let message = formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤';
    
    // Web3Forms –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ –æ–¥–Ω–æ –ø–æ–ª–µ
    if (files.length > 0) {
      files.forEach((file) => {
        form.append('attachment', file, file.name);  // –í—Å–µ —Ñ–∞–π–ª—ã —Å –æ–¥–Ω–∏–º –∏–º–µ–Ω–µ–º
      });
      message += `\n\nüìé –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.length}`;
      console.log(`üì§ Web3Forms: –ü—Ä–∏–∫—Ä–µ–ø–ª—è—é ${files.length} —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–Ω–æ–º –ø–∏—Å—å–º–µ`);
    }
    
    form.append('message', message);
    form.append('subject', '–ó–ê–Ø–í–ö–ê —Å —Å–∞–π—Ç–∞ utilizon.pro');

    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ Web3Forms...');
    const response = await fetch('https://api.web3forms.com/submit', {
      method: 'POST',
      body: form
    });

    console.log('üìß Web3Forms –æ—Ç–≤–µ—Ç:', response.status, response.ok);
    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå Web3Forms error:', errorText);
    }
    
    return { success: response.ok, method: 'Web3Forms' };
  } catch (error) {
    return { success: false, error, method: 'Web3Forms' };
  }
};

// 4. FormSpree (–†–ï–ó–ï–†–í)
export const sendViaFormSpree = async (formData: any, files: File[]) => {
  try {
    const response = await fetch('https://formspree.io/f/xvggqgok', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        name: formData.name,
        email: formData.email,
        phone: formData.phone,
        company: formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
        city: formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city,
        plan: formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω',
        message: formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
        files: files.map(f => f.name).join(', ')
      })
    });

    return { success: response.ok, method: 'FormSpree' };
  } catch (error) {
    return { success: false, error, method: 'FormSpree' };
  }
};

// 5. –ì–õ–ê–í–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è - –ø—Ä–æ–±—É–µ—Ç –≤—Å–µ —Å–ø–æ—Å–æ–±—ã
export const sendEmail = async (formData: any, files: File[] = []) => {
  console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–æ–≤...');
  
  // –ü—Ä–æ–±—É–µ–º Web3Forms (–í–°–ï –§–ê–ô–õ–´ –í –û–î–ù–û–ú –ü–ò–°–¨–ú–ï!)
  const web3FormsResult = await sendViaWeb3Forms(formData, files);
  if (web3FormsResult.success) {
    console.log('‚úÖ Web3Forms - SUCCESS');
    return { success: true, method: 'Web3Forms' };
  }
  
  // –ü—Ä–æ–±—É–µ–º FormSubmit (—Å —Ñ–∞–π–ª–∞–º–∏ —Ä–∞–∑–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏)
  const formSubmitResult = await sendViaFormSubmit(formData, files);
  if (formSubmitResult.success) {
    console.log('‚úÖ FormSubmit - SUCCESS');
    return { success: true, method: 'FormSubmit' };
  }
  
  // –†–µ–∑–µ—Ä–≤ - –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–∏—Å—å–º–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
  const formSubmitMultipleResult = await sendViaFormSubmitMultiple(formData, files);
  if (formSubmitMultipleResult.success) {
    console.log('‚úÖ FormSubmitMultiple - SUCCESS');
    return { success: true, method: 'FormSubmitMultiple' };
  }
  
  // –ü—Ä–æ–±—É–µ–º EmailJS (—Ä–µ–∑–µ—Ä–≤)
  const emailJSResult = await sendViaEmailJS(formData, files);
  if (emailJSResult.success) {
    console.log('‚úÖ EmailJS - SUCCESS');
    return { success: true, method: 'EmailJS' };
  }
  
  // –ü—Ä–æ–±—É–µ–º FormSpree
  const formSpreeResult = await sendViaFormSpree(formData, files);
  if (formSpreeResult.success) {
    console.log('‚úÖ FormSpree - SUCCESS');
    return { success: true, method: 'FormSpree' };
  }
  
  console.log('‚ùå –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏');
  return { success: false, error: '–í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø—ã' };
};

// –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const sendEmailWithFiles = sendEmail;