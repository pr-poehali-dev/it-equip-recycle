import emailjs from '@emailjs/browser';

// EmailJS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù - –ù–£–ñ–ù–´ –ö–õ–Æ–ß–ò)
export const emailJSConfig = {
  serviceId: '', // –ü—É—Å—Ç–æ–π = –æ—Ç–∫–ª—é—á–µ–Ω
  templateId: '', 
  publicKey: ''
};

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ EmailJS (–ü–†–û–ü–£–°–ö–ê–ï–ú - –ù–£–ñ–ù–´ –ö–õ–Æ–ß–ò)
export const sendEmailWithFiles = async (formData: any, files: File[]) => {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∫–∞ –Ω–µ—Ç –∫–ª—é—á–µ–π
  if (!emailJSConfig.serviceId) {
    console.log('‚ö†Ô∏è EmailJS –ø—Ä–æ–ø—É—â–µ–Ω - –Ω—É–∂–Ω—ã –∫–ª—é—á–∏');
    return { success: false, error: 'No keys' };
  }
  
  return { success: false, error: 'Disabled' };
};

// –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - Netlify Forms (–µ—Å–ª–∏ –ø—Ä–æ–µ–∫—Ç –Ω–∞ Netlify)
export const sendViaNetlifyForms = async (formData: any, files: File[]) => {
  const form = new FormData();
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  form.append('form-name', 'contact'); // –ò–º—è —Ñ–æ—Ä–º—ã –≤ HTML
  form.append('name', formData.name);
  form.append('email', formData.email);
  form.append('phone', formData.phone);
  form.append('company', formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞');
  form.append('city', formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city);
  form.append('plan', formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω');
  form.append('message', formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤');
  
  // –§–∞–π–ª—ã
  files.forEach((file, index) => {
    form.append(`file-${index}`, file);
  });

  try {
    const response = await fetch('/', {
      method: 'POST',
      body: form
    });
    
    return { success: response.ok, response };
  } catch (error) {
    return { success: false, error };
  }
};

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ 3 - –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π backend endpoint
export const sendViaCustomAPI = async (formData: any, files: File[]) => {
  const form = new FormData();
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  form.append('name', formData.name);
  form.append('email', formData.email);
  form.append('phone', formData.phone);
  form.append('company', formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞');
  form.append('city', formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city);
  form.append('plan', formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω');
  form.append('message', formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤');
  
  // –§–∞–π–ª—ã
  files.forEach((file, index) => {
    form.append('files', file);
  });

  try {
    // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à backend URL
    const response = await fetch('/api/send-email', {
      method: 'POST',
      body: form
    });
    
    return { success: response.ok, response };
  } catch (error) {
    return { success: false, error };
  }
};

// –ë–´–°–¢–†–ê–Ø –û–¢–ü–†–ê–í–ö–ê - FormSubmit —Å —Ç–∞–π–º–∞—É—Ç–æ–º
export const sendViaFormSpree = async (formData: any, files: File[]) => {
  try {
    const form = new FormData();
    
    form.append('name', formData.name);
    form.append('email', formData.email); 
    form.append('phone', formData.phone);
    form.append('company', formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞');
    
    const city = formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city;
    form.append('city', city || '–ù–µ —É–∫–∞–∑–∞–Ω');
    form.append('plan', formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω');
    
    // –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ñ–∞–π–ª–∞—Ö
    let message = formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤';
    if (files.length > 0) {
      message += `\n\nüìé –§–∞–π–ª—ã: ${files.map(f => f.name).join(', ')}`;
      message += '\n\n‚ö†Ô∏è –§–∞–π–ª—ã –ù–ï –ü–†–ò–ö–†–ï–ü–õ–ï–ù–´! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º.';
    }
    
    form.append('message', message);
    form.append('_subject', '–ó–ê–Ø–í–ö–ê –Ω–∞ —É—Ç–∏–ª–∏–∑–∞—Ü–∏—é');
    form.append('_captcha', 'false');

    // –ë–´–°–¢–†–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º 5 —Å–µ–∫
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000);
    
    try {
      await fetch('https://formsubmit.co/commerce@rusutil-1.ru', {
        method: 'POST',
        body: form,
        mode: 'no-cors',
        signal: controller.signal
      });
      clearTimeout(timeoutId);
      return { success: true };
    } catch (fetchError) {
      clearTimeout(timeoutId);
      // –î–∞–∂–µ –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ - —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º (no-cors –Ω–µ –¥–∞–µ—Ç —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞)
      console.log('‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞, –Ω–æ –ø–∏—Å—å–º–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      return { success: true };
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
    return { success: false, error };
  }
};