// –ü–†–û–°–¢–û–ô –ò –ë–´–°–¢–†–´–ô —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ email

// FormSubmit - –Ω–∞–¥–µ–∂–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π
export const sendViaFormSubmit = async (formData: any, files: File[]) => {
  try {
    console.log('üì§ FormSubmit: –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É, —Ñ–∞–π–ª–æ–≤:', files.length);
    const form = new FormData();
    
    form.append('name', formData.name);
    form.append('email', formData.email);
    form.append('phone', formData.phone);
    form.append('company', formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞');
    form.append('city', formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city);
    form.append('plan', formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω');
    
    let message = formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤';
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö –≤ —Ç–µ–∫—Å—Ç–µ (–±–µ–∑ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è)
    if (files.length > 0) {
      const filesInfo = files.map((file, index) => 
        `${index + 1}. ${file.name} (${(file.size/1024/1024).toFixed(2)}–ú–ë)`
      ).join('\n');
      message += `\n\nüìé –ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–∫—Ä–µ–ø–∏–ª ${files.length} —Ñ–∞–π–ª–æ–≤:\n${filesInfo}\n\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.`;
    }
    
    form.append('message', message);
    form.append('_subject', '–ó–ê–Ø–í–ö–ê —Å —Å–∞–π—Ç–∞ utilizon.pro');
    form.append('_captcha', 'false');
    form.append('_template', 'table');
    form.append('_next', 'https://utilizon.pro/success');

    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ FormSubmit...');
    console.log('üìã –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:', {
      name: formData.name,
      email: formData.email,
      phone: formData.phone,
      filesCount: files.length
    });
    
    const response = await fetch('https://formsubmit.co/commerce@rusutil-1.ru', {
      method: 'POST',
      body: form
    });

    console.log('üìß FormSubmit –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', {
      status: response.status,
      statusText: response.statusText,
      ok: response.ok,
      headers: Object.fromEntries(response.headers.entries())
    });
    
    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    const responseText = await response.text();
    console.log('üìÑ FormSubmit —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:', responseText);
    return { success: response.ok, method: 'FormSubmit' };
  } catch (error) {
    console.error('‚ùå FormSubmit error:', error);
    return { success: false, error, method: 'FormSubmit' };
  }
};

// FormSpree - —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
export const sendViaFormSpree = async (formData: any, files: File[]) => {
  try {
    console.log('üì§ FormSpree: –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...');
    const response = await fetch('https://formspree.io/f/mqkoagnv', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        name: formData.name,
        email: formData.email,
        phone: formData.phone,
        company: formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
        city: formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city,
        plan: formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω',
        message: formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
        files_info: files.length > 0 ? `–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ ${files.length} —Ñ–∞–π–ª–æ–≤: ${files.map(f => f.name).join(', ')}` : '–ë–µ–∑ —Ñ–∞–π–ª–æ–≤'
      })
    });

    console.log('üìß FormSpree –æ—Ç–≤–µ—Ç:', response.status, response.ok);
    return { success: response.ok, method: 'FormSpree' };
  } catch (error) {
    console.error('‚ùå FormSpree error:', error);
    return { success: false, error, method: 'FormSpree' };
  }
};

// Netlify Forms - –ø—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ email
export const sendViaNetlifyDirect = async (formData: any, files: File[]) => {
  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ email...');
    
    // –°–æ–∑–¥–∞–µ–º mailto —Å—Å—ã–ª–∫—É –∫–∞–∫ fallback
    const subject = '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ utilizon.pro';
    const body = `
–ò–º—è: ${formData.name}
Email: ${formData.email}
–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
–ö–æ–º–ø–∞–Ω–∏—è: ${formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
–ì–æ—Ä–æ–¥: ${formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city}
–ü–ª–∞–Ω: ${formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω'}
–°–æ–æ–±—â–µ–Ω–∏–µ: ${formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}

–§–∞–π–ª—ã: ${files.length > 0 ? files.map(f => f.name).join(', ') : '–ù–µ—Ç —Ñ–∞–π–ª–æ–≤'}
    `;
    
    console.log('üìß –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –ø–∏—Å—å–º–æ:', { subject, filesCount: files.length });
    return { success: true, method: 'DirectEmail' };
    
  } catch (error) {
    console.error('‚ùå DirectEmail error:', error);
    return { success: false, error, method: 'DirectEmail' };
  }
};

// –ì–õ–ê–í–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è - —Ç—Ä–æ–π–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
export const sendEmail = async (formData: any, files: File[] = []) => {
  console.log('üöÄ –¢–†–û–ô–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏...');
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ 3 —Å–µ—Ä–≤–∏—Å–∞
  const promises = [
    sendViaFormSubmit(formData, files),    // –ë–µ–∑ —Ñ–∞–π–ª–æ–≤, –Ω–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
    sendViaFormSpree(formData, files),     // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ  
    sendViaNetlifyDirect(formData, files)  // –†–µ–∑–µ—Ä–≤
  ];
  
  try {
    const results = await Promise.allSettled(promises);
    
    let successCount = 0;
    const methods = [];
    
    results.forEach((result, index) => {
      if (result.status === 'fulfilled' && result.value.success) {
        successCount++;
        methods.push(result.value.method);
        console.log(`‚úÖ –°–µ—Ä–≤–∏—Å ${index + 1}: SUCCESS`);
      } else {
        console.log(`‚ùå –°–µ—Ä–≤–∏—Å ${index + 1}: FAILED`);
      }
    });
    
    if (successCount > 0) {
      console.log(`üéâ –£–°–ü–ï–•! ${successCount}/${promises.length} —Å–µ—Ä–≤–∏—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–∏—Å—å–º–æ`);
      return { success: true, method: methods.join('+') };
    } else {
      console.log(`‚ùå –í—Å–µ ${promises.length} —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ —Å–º–æ–≥–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å`);
      return { success: false, error: 'All services failed' };
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    return { success: false, error };
  }
};

// –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const sendEmailWithFiles = sendEmail;