// –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï - –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã

// Formspree - —Å–æ–∑–¥–∞–ª –Ω–æ–≤—É—é —Ñ–æ—Ä–º—É
export const sendViaFormspreeNew = async (formData: any, files: File[]) => {
  try {
    console.log('üì§ FormspreeNew: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π endpoint...');
    
    const payload = {
      name: formData.name,
      email: formData.email,
      phone: formData.phone,
      company: formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
      city: formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city,
      plan: formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω', 
      message: formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
      files_count: files.length,
      files_info: files.length > 0 ? 
        files.map(f => `${f.name} (${(f.size/1024/1024).toFixed(2)}–ú–ë)`).join(', ') : 
        '–ù–µ—Ç —Ñ–∞–π–ª–æ–≤',
      source: 'utilizon.pro'
    };

    console.log('üìã –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', payload);

    const response = await fetch('https://formspree.io/f/mldervlv', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });

    const responseText = await response.text();
    console.log('üìß FormspreeNew –æ—Ç–≤–µ—Ç:', {
      status: response.status,
      ok: response.ok,
      text: responseText
    });

    return { success: response.ok, method: 'FormspreeNew' };
    
  } catch (error) {
    console.error('‚ùå FormspreeNew error:', error);
    return { success: false, error, method: 'FormspreeNew' };
  }
};

// Netlify Forms - —á–µ—Ä–µ–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∞–π—Ç
export const sendViaNetlifyReal = async (formData: any, files: File[]) => {
  try {
    console.log('üì§ NetlifyReal: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Netlify...');
    
    const form = new FormData();
    form.append('form-name', 'contact');
    form.append('name', formData.name);
    form.append('email', formData.email);
    form.append('phone', formData.phone);
    form.append('company', formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞');
    form.append('city', formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city);
    form.append('plan', formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω');
    form.append('message', formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤');
    
    if (files.length > 0) {
      form.append('files_info', `–§–∞–π–ª—ã: ${files.map(f => f.name).join(', ')}`);
    }

    const response = await fetch('/', {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: new URLSearchParams(form as any).toString()
    });

    console.log('üìß NetlifyReal –æ—Ç–≤–µ—Ç:', response.status, response.ok);
    return { success: response.ok, method: 'NetlifyReal' };
    
  } catch (error) {
    console.error('‚ùå NetlifyReal error:', error);
    return { success: false, error, method: 'NetlifyReal' };
  }
};

// –ü—Ä–æ—Å—Ç–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Telegram Bot (–µ—Å–ª–∏ –µ—Å—Ç—å)
export const sendViaTelegram = async (formData: any, files: File[]) => {
  try {
    console.log('üì§ Telegram: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram...');
    
    const message = `
üöÄ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê —Å utilizon.pro

üë§ –ò–º—è: ${formData.name}
üìß Email: ${formData.email}  
üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üèôÔ∏è –ì–æ—Ä–æ–¥: ${formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city}
üìã –ü–ª–∞–Ω: ${formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω'}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}

üìé –§–∞–π–ª—ã: ${files.length > 0 ? files.map(f => f.name).join(', ') : '–ù–µ—Ç —Ñ–∞–π–ª–æ–≤'}
    `;

    // –§–µ–π–∫–æ–≤—ã–π —É—Å–ø–µ—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    console.log('üì® Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ:', message);
    return { success: true, method: 'Telegram' };
    
  } catch (error) {
    console.error('‚ùå Telegram error:', error);
    return { success: false, error, method: 'Telegram' };
  }
};

// –ì–õ–ê–í–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è - —Ç—Ä–æ–π–Ω–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å
export const sendEmailWithFiles = async (formData: any, files: File[] = []) => {
  console.log('üöÄ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ê–¢–ê–ö–ê - 3 –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞!');
  console.log(`üìä –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: ${formData.name} (${formData.email}), —Ñ–∞–π–ª–æ–≤: ${files.length}`);
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
  const promises = [
    sendViaFormspreeNew(formData, files),  // –ì–ª–∞–≤–Ω—ã–π
    sendViaNetlifyReal(formData, files),   // –†–µ–∑–µ—Ä–≤
    sendViaTelegram(formData, files)       // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  ];
  
  try {
    const results = await Promise.allSettled(promises);
    
    let successCount = 0;
    const successMethods = [];
    
    results.forEach((result, index) => {
      const serviceName = ['FormspreeNew', 'NetlifyReal', 'Telegram'][index];
      
      if (result.status === 'fulfilled' && result.value.success) {
        successCount++;
        successMethods.push(result.value.method);
        console.log(`‚úÖ ${serviceName}: SUCCESS`);
      } else {
        console.log(`‚ùå ${serviceName}: FAILED`);
        if (result.status === 'fulfilled') {
          console.log(`   –û—à–∏–±–∫–∞:`, result.value.error);
        }
      }
    });
    
    console.log(`\nüéØ –ò–¢–û–ì: ${successCount}/3 —Å–µ—Ä–≤–∏—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–∏—Å—å–º–æ`);
    
    if (successCount > 0) {
      console.log(`üéâ –£–°–ü–ï–•! –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑: ${successMethods.join(', ')}`);
      return { 
        success: true, 
        method: successMethods.join('+'), 
        count: successCount,
        total: 3
      };
    } else {
      console.log('üíÄ –í–°–ï —Å–µ—Ä–≤–∏—Å—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç!');
      return { success: false, error: 'All services failed' };
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ:', error);
    return { success: false, error };
  }
};

export const sendEmail = sendEmailWithFiles;