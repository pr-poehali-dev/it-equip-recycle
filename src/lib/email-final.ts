// –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø - –£–ë–†–ê–õ FormSubmit, –¢–û–õ–¨–ö–û –†–ê–ë–û–ß–ï–ï!

// 1. –†–ê–ë–û–ß–ê–Ø –û–¢–ü–†–ê–í–ö–ê (Formspree - —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ)
export const sendViaFormspree = async (formData: any, files: File[]) => {
  console.log('üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Formspree...');
  
  const payload = {
    name: formData.name,
    phone: formData.phone, 
    email: formData.email,
    company: formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
    equipment: formData.equipment || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
    volume: formData.volume || '–ù–µ —É–∫–∞–∑–∞–Ω',
    address: formData.address || '–ù–µ —É–∫–∞–∑–∞–Ω',
    comment: formData.comment || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
    files_count: files.length,
    files_info: files.length > 0 ? 
      files.map(f => `${f.name} (${(f.size/1024/1024).toFixed(2)}–ú–ë)`).join(', ') : 
      '–ù–µ—Ç —Ñ–∞–π–ª–æ–≤'
  };

  try {
    const response = await fetch('https://formspree.io/f/mldervlv', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });

    if (response.ok) {
      console.log('‚úÖ Formspree: –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
      return { success: true };
    } else {
      throw new Error(`HTTP ${response.status}`);
    }
  } catch (error) {
    console.error('‚ùå Formspree –æ—à–∏–±–∫–∞:', error);
    return { success: false, error };
  }
};

// 2. –†–ï–ó–ï–†–í —á–µ—Ä–µ–∑ mailto
export const sendViaMailto = async (formData: any, files: File[]) => {
  console.log('üìß –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç...');
  
  const body = `
–ó–∞—è–≤–∫–∞ –Ω–∞ —É—Ç–∏–ª–∏–∑–∞—Ü–∏—é IT –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è

–ò–º—è: ${formData.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}
Email: ${formData.email}
–ö–æ–º–ø–∞–Ω–∏—è: ${formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: ${formData.equipment || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
–û–±—ä–µ–º: ${formData.volume || '–ù–µ —É–∫–∞–∑–∞–Ω'}
–ê–¥—Ä–µ—Å: ${formData.address || '–ù–µ —É–∫–∞–∑–∞–Ω'}
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${formData.comment || '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}

–§–∞–π–ª–æ–≤: ${files.length}
${files.map(f => `- ${f.name} (${(f.size/1024/1024).toFixed(2)}–ú–ë)`).join('\n')}
`;
  
  const mailto = `mailto:commerce@rusutil-1.ru?subject=–ó–∞—è–≤–∫–∞ –Ω–∞ —É—Ç–∏–ª–∏–∑–∞—Ü–∏—é&body=${encodeURIComponent(body)}`;
  window.open(mailto);
  
  return { success: true };
};

// 3. –ü–†–û–í–ï–†–ö–ê –û–¢–ü–†–ê–í–ö–ò (—Ç–µ—Å—Ç–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞)
export const testEmailSending = async () => {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É...');
  
  const testData = {
    name: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞',
    phone: '+7 (999) 123-45-67',
    email: 'test@example.com',
    company: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è',
    equipment: '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
    volume: '–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—ä–µ–º',
    address: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å',
    comment: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏'
  };
  
  const result = await sendViaFormspree(testData, []);
  
  if (result.success) {
    alert('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É commerce@rusutil-1.ru');
  } else {
    alert('‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª. Formspree –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.');
  }
  
  return result;
};

// –ì–õ–ê–í–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è - –ø—Ä–æ—Å—Ç–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è
export const sendEmailWithFiles = async (formData: any, files: File[] = []) => {
  console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É...');
  
  // 1. –°–Ω–∞—á–∞–ª–∞ Formspree (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ)
  const formspreeResult = await sendViaFormspree(formData, files);
  if (formspreeResult.success) {
    console.log('‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ Formspree!');
    return { success: true, method: 'Formspree' };
  }
  
  // 2. –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - mailto
  console.log('‚ö†Ô∏è Formspree –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç...');
  await sendViaMailto(formData, files);
  
  return { 
    success: true, 
    method: 'Mailto',
    message: '–ü–æ—á—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏'
  };
};

export const sendEmail = sendEmailWithFiles;