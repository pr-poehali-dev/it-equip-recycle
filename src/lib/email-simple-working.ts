// –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–∞–±–æ—Ç–∞—é—â–µ–º—É FormSubmit

export const sendViaFormSubmit = async (formData: any, files: File[]) => {
  try {
    console.log('üì§ FormSubmit: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É (–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–ª–æ —Ä–∞–Ω—å—à–µ)...');
    console.log(`üìä –§–∞–π–ª–æ–≤: ${files.length}, –¥–∞–Ω–Ω—ã–µ:`, {
      name: formData.name,
      email: formData.email,
      phone: formData.phone
    });
    
    const form = new FormData();
    
    // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è (–∫–∞–∫ –±—ã–ª–æ)
    form.append('name', formData.name);
    form.append('email', formData.email);
    form.append('phone', formData.phone);
    form.append('company', formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞');
    form.append('city', formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city);
    form.append('plan', formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω');
    form.append('message', formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤');
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ FormSubmit (–±–∞–∑–æ–≤—ã–µ)
    form.append('_subject', '–ó–∞—è–≤–∫–∞ –Ω–∞ —É—Ç–∏–ª–∏–∑–∞—Ü–∏—é IT –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è');
    form.append('_captcha', 'false');
    
    // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª—ã (–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–ª–æ —Ä–∞–Ω—å—à–µ)
    files.forEach((file, index) => {
      form.append(`file${index + 1}`, file);
      console.log(`üìé –ü—Ä–∏–∫—Ä–µ–ø–ª—è—é —Ñ–∞–π–ª ${index + 1}: ${file.name} (${(file.size/1024/1024).toFixed(2)}–ú–ë)`);
    });

    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ FormSubmit (—Ç–æ—Ç –∂–µ endpoint —á—Ç–æ —Ä–∞–±–æ—Ç–∞–ª)...');
    
    const response = await fetch('https://formsubmit.co/commerce@rusutil-1.ru', {
      method: 'POST',
      body: form
    });

    console.log('üìß FormSubmit –æ—Ç–≤–µ—Ç:', {
      status: response.status,
      statusText: response.statusText,
      ok: response.ok
    });

    if (response.ok) {
      console.log('‚úÖ FormSubmit: –£–°–ü–ï–•! –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      return { success: true, method: 'FormSubmit' };
    } else {
      console.log('‚ùå FormSubmit: –û—à–∏–±–∫–∞ HTTP', response.status);
      return { success: false, error: `HTTP ${response.status}`, method: 'FormSubmit' };
    }
    
  } catch (error) {
    console.error('‚ùå FormSubmit: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞', error);
    return { success: false, error, method: 'FormSubmit' };
  }
};

// –†–µ–∑–µ—Ä–≤–Ω—ã–π FormSpree (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π endpoint)
export const sendViaFormSpree = async (formData: any, files: File[]) => {
  try {
    console.log('üì§ FormSpree: –†–µ–∑–µ—Ä–≤–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞...');
    
    const payload = {
      name: formData.name,
      email: formData.email,
      phone: formData.phone,
      company: formData.company || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
      city: formData.city === '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥' ? formData.customCity : formData.city,
      plan: formData.selectedPlan || '–ù–µ –≤—ã–±—Ä–∞–Ω',
      message: formData.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤',
      files_info: files.length > 0 ? 
        `–ö–ª–∏–µ–Ω—Ç –ø—Ä–∏–∫—Ä–µ–ø–∏–ª ${files.length} —Ñ–∞–π–ª–æ–≤: ${files.map(f => f.name).join(', ')}` : 
        '–ë–µ–∑ —Ñ–∞–π–ª–æ–≤'
    };

    const response = await fetch('https://formspree.io/f/mldervlv', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    });

    console.log('üìß FormSpree –æ—Ç–≤–µ—Ç:', response.status, response.ok);
    return { success: response.ok, method: 'FormSpree' };
    
  } catch (error) {
    console.error('‚ùå FormSpree error:', error);
    return { success: false, error, method: 'FormSpree' };
  }
};

// –ì–õ–ê–í–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è - —Å–Ω–∞—á–∞–ª–∞ FormSubmit, –ø–æ—Ç–æ–º —Ä–µ–∑–µ—Ä–≤
export const sendEmailWithFiles = async (formData: any, files: File[] = []) => {
  console.log('üöÄ –ü—Ä–æ—Å—Ç–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ - —Å–Ω–∞—á–∞–ª–∞ FormSubmit, –ø–æ—Ç–æ–º —Ä–µ–∑–µ—Ä–≤...');
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º FormSubmit (–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–ª–æ —Ä–∞–Ω—å—à–µ)
  const formSubmitResult = await sendViaFormSubmit(formData, files);
  
  if (formSubmitResult.success) {
    console.log('‚úÖ FormSubmit —Å—Ä–∞–±–æ—Ç–∞–ª! –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    return { success: true, method: 'FormSubmit' };
  }
  
  console.log('‚ö†Ô∏è FormSubmit –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤...');
  
  // –†–µ–∑–µ—Ä–≤ - FormSpree –±–µ–∑ —Ñ–∞–π–ª–æ–≤
  const formSpreeResult = await sendViaFormSpree(formData, files);
  
  if (formSpreeResult.success) {
    console.log('‚úÖ FormSpree —Å—Ä–∞–±–æ—Ç–∞–ª –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤');
    return { success: true, method: 'FormSpree' };
  }
  
  console.log('‚ùå –û–±–∞ —Å–µ—Ä–≤–∏—Å–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏');
  return { success: false, error: 'Both services failed' };
};

export const sendEmail = sendEmailWithFiles;